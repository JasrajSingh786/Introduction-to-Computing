ASSIGNMENT-3:




Q.1.

Solution: 

# We have write a Python program to count the number of occurrences of each word or
# character in the string entered by the user. (Count the Number of Occurrences
# of each character only if the single word is entered by the user)

Input_String=str(input("Enter the Input String: "))
list=Input_String.split() #To split all the elements of string in a list
dict={} #initializing an empty dictionary


if list.__len__()==1:   #if statement will be implemented when a single word is entered
    
    for i in list[0]:
        if i in dict:
            dict[i]+=1
        else:
            dict[i]=1
    print(dict)   


else:                   #else statement will be implemented when more than one word is entered in a string
    
    for i in list:
        if i in dict:
            dict[i]+=1
        else:
            dict[i]=1
    print(dict)

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.2.

Solution: 

#We have to write a program which gives the next date of the date entered by the user.
#We are given: 1800 <= Year <= 2025, 1 <= Month <= 12 and 1 <= Day <= 31

#We are using the while loop because if we get an invalid date, we could instruct our program to ask for the values again.

while True:
    Date = int(input("ENTER THE DATE: "))
    Month = int(input("ENTER THE MONTH: "))
    Year = int(input("ENTER THE YEAR BETWEEN 1800 to 2025 INCLUDING BOTH THE END YEAR'S: "))


    if Date < 31 and Month in [1,3,5,7,8,10,12] and 1800 <= Year <= 2025 : #The case when our Month has 31 days.
        Next_Date = "The Next Date is: {}-{}-{}" #  We are using String Formatting for printing the Next Date.
        Next_Date1 = Next_Date.format(Date + 1 , Month , Year )
        print(Next_Date1)
        break
        
    elif Date <29 and Month == 2 and Year % 4 == 0 and 1800 < Year <= 2025: #The case when we have Month as 'February' and We are given a Leap Year. 
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date2 = Next_Date.format(Date + 1, Month , Year)
        print(Next_Date2)
        break

    elif Date == 28 and Month == 2 and Year % 4 != 0 and 1800 < Year <= 2025 : #The case when we have Month as 'February' and We are not given a Leap Year. 
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date3 = Next_Date.format( 1, Month + 1 , Year )
        print(Next_Date3)
        break

    elif Date == 31 and Month in [1,3,5,7,8,10] and 1800 <= Year <= 2025: #The case when we are at the end of a Month having 31 days, excluding December.
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date4 = Next_Date.format(1 , Month + 1 , Year)
        print(Next_Date4)
        break 

    elif Date < 30 and Month in [4,6,9,11] and 1800 <= Year <= 2025: #The case when we have Month having 30 Days. 
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date5 = Next_Date.format(Date + 1 , Month , Year)
        print(Next_Date5)
        break

    elif Date == 30 and Month in [4,6,9,11] and 1800 <= Year <= 2025: #The case when we have Date as 30 and Month having 30 Days. 
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date6 = Next_Date.format( 1 , Month + 1 , Year)
        print(Next_Date6)
        break

    elif Date == 31 and Month == 12 and 1800 <= Year < 2025: #The case when we have Month as 'December' and Date as '31'.
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date7 = Next_Date.format(1 , 1 , Year + 1) 
        print(Next_Date7)
        break   

    elif Date == 29 and Month == 2 and Year % 400 == 0 and Year == [1800 , 1900 , 2000] : #The case when we have the start of the century which is a Leap Year. 
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date8 = Next_Date.format(1 , Month + 1 , Year ) 
        print(Next_Date8)
        break   

    elif Date == 28 and Month == 2 and Year % 400 != 0 and  Year == [1800 , 1900 , 2000 ]: #The case when we have start of the century which is not a Leap Year.
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date9 = Next_Date.format( 1 , Month + 1 , Year ) 
        print(Next_Date9)
        break

    elif Date == 28 and Month == 2 and Year % 400 == 0 and  1800 <= Year <= 2025: #The case when we have start of the century which is a Leap Year.
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date10 = Next_Date.format( Date + 1 , Month , Year ) 
        print(Next_Date10)   
        break

    elif Date ==29 and Month == 2 and Year % 4 == 0 and 1800 < Year <= 2025: #The case when we have Month as 'February' and Date as 29 , and We are given a Leap Year. 
        Next_Date = "The Next Date is: {}-{}-{}"
        Next_Date11 = Next_Date.format(1, Month + 1 , Year)
        print(Next_Date11)
        break

    else:
        print('Date Invalid: Please Re-enter the Values: ')
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.3.

Solution: 

#We have to create a python program to create a list of tuples with the First element as the number and Second element as the square of the number
#For e.g; list = [3,9,10] and Output: [(3,9),(9,81),(10,100)]

#First, We will create the List by taking input from User:

Input_Number = int(input("Enter the First number: "))
Input_List = [Input_Number]
List_of_Squares = [] #We first create List_of_Squares as an empty List and then we will add values into it by using for loop. 

#We will first create the List by using while loop in which we will use if-else statements:
#The below states that first we will be prompted whether you want to add more number in the list. 
#if Yes, then enter the number and then add it into the list, and if No, then Simply break out of the loop. OtherWise print 'Invalid Input'

while True:
    
    Prompt = input("Do you want to add more: (Yes or No); " )
    if Prompt == "Yes":
        Next_Number = int(input("Enter the Number: "))
        Input_List.append(Next_Number)

    elif Prompt == "No":
        break
    else:
        print("Invalid Input:")

print("The Input List is:" , Input_List)

#Now, After creating the Input list, We will now create the List of Squares and Zip it's elements with corresponding Number in the Input List.

for I in Input_List:
    List_of_Squares.append(I**2)

print("The Output List is: " , list(zip(Input_List,List_of_Squares)))
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.4.

Solution:

#We have to write a program to prompt the user for a grade between 4 and 10. If the grade
#is out of range print error message.

#We first will create a list of Letter Grades and Performance and then use zip() function to form a list of tuples of Letter Grades and corresponding Performance.

Letter_Grades = ['A+' , 'A' , 'B+' , 'B' , 'Ã‡+' , 'C' , 'D']
Performance = ['Outstanding' , 'Excellent' , 'Very Good' , 'Good' , 'Average' , 'Below Average' , 'Poor']
Grade_Perform_List = list(zip(Letter_Grades,Performance))

#Now, We will use the while statement if the input Grade Point entered is not in the range given and we will make the user enter the Grade Points again:

while True: 
    Grade_Points = int(input('Enter your Grade point: '))
    if 4<= Grade_Points <=10:
        print("Your Grade is '%s' and %s performance " % Grade_Perform_List[10 - Grade_Points] ) #It states that for Grade Points in the range (4,11), print the statement where we will use String formatting
        break                                                                                    #to take the values from the combined Grade Performance List, by using bracket operator for the List having argument '10 - Grade_Points'. 
    else:
        print('ValueError: Grade point out of Range \nPlease Re-enter the values:')
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.5.

Solution:

#We have to write a program to get the following pattern:
# ABCDEFGHIJK
#  ABCDEFGHI
#   ABCDEFG
#    ABCDE
#     ABC
#      A
String1 = "ABCDEFGHIJK" #Given String with which we have to create the pattern.
String2 = "     " #We will use the help of empty string which has index from 0 to 4 i,e: Length of the string is 5.
i = 11
a = 1     # i and a are variables having values 11 and 1 respectively, which will help us in defining the required pattern in the while loop given below.
print("The Required Pattern is: ")
print(String1)
while 2 < i and a <= 5 : #We will use the help of while loop for getting our desired pattern.
    String3 = String2[0:a] + String1[0:i-2] #We will use the slice bracket operation for string.
    i = i - 2
    a = a + 1
    print(String3)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.6.

Solution:

import operator

SID_Name_Dictionary = dict()
First_Student = str(input("Enter the name of Student: "))
SID_of_First_Student = int(input("Enter the SID of Student: "))
SID_Name_Dictionary[SID_of_First_Student] = First_Student


while True:
    
    Prompt = input("Do you want to add another student Yes,Y or No,N: ")
    
    if Prompt == 'Y':
        Name_of_Student = str(input("Enter the name of Student: "))
        SID_of_Student = int(input("Enter the SID of Student: "))
        SID_Name_Dictionary[SID_of_Student] = Name_of_Student
    elif Prompt == 'N':
        break

#Q.6. a) We have to print the Dictionary:

print("a) The list of Students is as follows: \n" , SID_Name_Dictionary)


#Q.6. b) We have to sort according to their names:

print("b) Sorted Dictionary according to their alphabetical order of their names is: \n" , dict(sorted(SID_Name_Dictionary.items(),key = operator.itemgetter(1))))


#Q.6. c) We have to sort according to their SID's:

print("c) Sorted Dictionary according to the ascending order of SID's is: \n" , dict(sorted(SID_Name_Dictionary.items())))

  
#Q.6. d) We have to search a student details with SID and print name of that student.

SID_Entered = int(input("d) Enter the SID whose Name you want: "))
print("The Name of the Student with SID as %d is: " %SID_Entered , SID_Name_Dictionary[SID_Entered] )
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.7.

Solution:

#We have to write a python program to print the Fibonacci Sequence and we also have to print the average of the resulting Fibonacci series.
from importlib import import_module #We are first using the import math function in order to use the inbuilt math functions.
#Q.7.
#a) In this, We have to List the Fibonacci Sequence.

import math
k = int(input("The Number of terms of Fibonacci Sequence which are to be listed: ")) # 'k' will be used to define the the last term of the Fibonacci Sequence. 
n = 1
u = math.sqrt(5)
Alpha = (u + 1)/2
Beta = (1 - u)/2
print("Fibonacci Sequence of first '%d' terms:" % k ) #We will find the first 'k' terms of the Fibonacci Sequence
while k >= n >= 1:
    Nth_term = (Alpha**n  -  Beta**n)/(Alpha - Beta) #This is the general formula for Fibonacci Sequence
    print( int(Nth_term) ) #We are using the 'int' function so as to get an integer return value as we do not have exact value of 'sqrt(5)' in the math module of python. 
    n = n + 1

#Q.7.
#b) In this, We have to find the Average of Fibonacci Sequence.

def FibSeq(n): #We are first defining a function named 'FibSeq' which has single argument 'n' where 'n' represents number of terms in the Fibonacci Sequence. 
    sequence = [0,1]
    for i in range(1,n): #Then we are using for loop, for defining the function which states that the Next_Num will be the sum of Last two terms in the list 'sequence' and then we are adding that number to the list itself.
        next_num = sequence[-1] + sequence[-2]


        sequence.append(next_num)
    return sequence

#For Average, We will use sum() and len() functions for list.

sequence = FibSeq(k)
Average_of_Fibonacci_Sequence = sum(sequence)/(len(sequence) - 1) #We are substracting 1 from len(sequence) because the list 'sequence' will contain 0 which is zeroth term of Fibonacci Sequence.
print("The Average of First '%d' terms of Fibonacci Sequence is: " % k , Average_of_Fibonacci_Sequence)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q.8.

Solution: 

#We are given the Sets below:
Set1= {1, 2, 3, 4, 5}
Set2= {2, 4, 6, 8}
Set3= {1, 5, 9, 13, 17}

#Q.8. a)

New_Set1 = set.union(Set1, Set2)
New_Set2 = set.intersection(Set1,Set2)

Final_Set1 = set.difference(New_Set1,New_Set2)
print("a) Set of all elements that are in Set1 and Set2 but not both: ",Final_Set1)

#Q.8. b)

New_Set3 = Set1 - Set2 - Set3
New_Set4 = Set2 - Set3 - Set1
New_Set5 = Set3 - Set1 - Set2
print("b) Set of all elements that are in only one of the three sets Set1, Set2 and Set3: ",New_Set3|New_Set4|New_Set5)


#Q.8. c)

New_Set6 = Set1&Set2 
New_Set7 = Set2&Set3
New_Set8 = Set3&Set1

Final_Set2 = (Set1&Set2|Set2&Set3|Set3&Set1)  - (Set1&Set2&Set3) 
print("c) Set of elements that are exactly two of the sets Set1, Set2 and Set3: " , Final_Set2)

#Q.8. d) 

Set_of_Int_in_range_1_to_10 = {1,2,3,4,5,6,7,8,9,10}
print("d) Set of all integers in the range 1 to 10 that are not in Set1: ",Set_of_Int_in_range_1_to_10 - Set1)


#Q.8. e)

print("e) Set of all integers in the range 1 to 10 that are not in Set1,Set2 and Set3: ", Set_of_Int_in_range_1_to_10 - Set1 - Set2 - Set3)


    
